from django.conf import settings
from django.db import models
from django.urls import reverse
from django.utils.text import slugify
from django.utils import timezone
from django.contrib.auth.models import User

# Create your models here.

class Playlist(models.Model):
    playlist_name = models.CharField(max_length=settings.PLAYLISTER_NAME_MAX_LENGTH, unique=True,
                             help_text="Title of your page.")
    author = models.ForeignKey(User, on_delete=models.PROTECT,
                            help_text="The user that posted this playlist.")
    slug = models.CharField(max_length=settings.PLAYLISTER_NAME_MAX_LENGTH, blank=True, editable=False,
                            help_text="Unique URL path to access this playlist. Generated by the system.")
    description = models.TextField(
        help_text="Write the description of your playlist here.")
    created = models.DateTimeField(auto_now_add=True,
                                   help_text="The date and time this page was created. Automatically generated when the model saves.")
    modified = models.DateTimeField(auto_now=True,
                                    help_text="The date and time this page was updated. Automatically generated when the model updates.")
    
    def __str__(self):
        return self.playlist_name

    def get_absolute_url(self):
        """ Returns a fully-qualified path for a playlist (/my-new-playlist-page). """
        path_components = {'slug': self.slug}
        return reverse('playlist-details-page', kwargs=path_components)

    def save(self, *args, **kwargs):
        """ Creates a URL safe slug automatically when a new a playlist is created. """
        if not self.pk:
            self.slug = slugify(self.playlist_name, allow_unicode=True)

        # Call save on the superclass.
        return super(Playlist, self).save(*args, **kwargs)

class Video(models.Model):
    video = models.CharField(max_length=200)
    playlist_id = models.ForeignKey(Playlist, on_delete=models.CASCADE)

    def __str__(self):
        return self.video